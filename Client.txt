import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)
from googleapiclient.discovery import build
import sqlite3
from datetime import datetime

# ========== Configuration ==========
TELEGRAM_TOKEN = "7861338140:AAG3w1f7UBcwKpdYh0ipfLB3nMZM3sLasP4"
YOUTUBE_API_KEY = "AIzaSyCH0lUUlI-u1ziHsHiSl8aTC2J0nFU2l2Q"
DATABASE_NAME = "client.db"

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
EMAIL, PHONE, FULLNAME, COUNTRY = range(4)

# ========== Database Setup ==========
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    c = conn.cursor()
    c.execute(
        """CREATE TABLE IF NOT EXISTS users
             (user_id INTEGER PRIMARY KEY AUTOINCREMENT,
              telegram_id INTEGER UNIQUE,
              email TEXT,
              phone TEXT,
              fullname TEXT,
              country TEXT,
              registration_date TEXT)"""
    )
    conn.commit()
    conn.close()

init_db()

# ========== YouTube Functions ==========
def get_channel_info(url: str) -> dict:
    youtube = build("youtube", "v3", developerKey=YOUTUBE_API_KEY)
    
    # Extract channel ID from different URL formats
    patterns = [
        r"youtube\.com/channel/([^/]+)",
        r"youtube\.com/c/([^/]+)",
        r"youtube\.com/user/([^/]+)",
        r"youtube\.com/@([^/]+)"
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            channel_id = match.group(1)
            request = youtube.channels().list(
                part="snippet",
                id=channel_id
            )
            response = request.execute()
            if response["items"]:
                return {
                    "name": response["items"][0]["snippet"]["title"],
                    "url": f"https://www.youtube.com/channel/{channel_id}"
                }
    return None

# ========== Bot Handlers ==========
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    update.message.reply_text(
        f"👋 Welcome {user.first_name}!\n"
        "Use /register to create an account\n"
        "Use /channel to verify a YouTube channel"
    )

def register(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("📝 Please enter your Google email address:")
    return EMAIL

def email_received(update: Update, context: CallbackContext) -> int:
    email = update.message.text
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        update.message.reply_text("❌ Invalid email format. Please try again:")
        return EMAIL
    context.user_data["email"] = email
    update.message.reply_text("📱 Please enter your phone number (with country code):")
    return PHONE

def phone_received(update: Update, context: CallbackContext) -> int:
    phone = update.message.text
    if not re.match(r"^\+\d{1,3}\d{9,15}$", phone):
        update.message.reply_text("❌ Invalid phone format. Please try again (e.g. +1234567890):")
        return PHONE
    context.user_data["phone"] = phone
    update.message.reply_text("👤 Please enter your full name:")
    return FULLNAME

def fullname_received(update: Update, context: CallbackContext) -> int:
    context.user_data["fullname"] = update.message.text
    update.message.reply_text("🌍 Please enter your country:")
    return COUNTRY

def country_received(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data
    user_data["country"] = update.message.text
    
    # Save to database
    conn = sqlite3.connect(DATABASE_NAME)
    c = conn.cursor()
    c.execute(
        """INSERT INTO users 
        (telegram_id, email, phone, fullname, country, registration_date)
        VALUES (?, ?, ?, ?, ?, ?)""",
        (
            update.effective_user.id,
            user_data["email"],
            user_data["phone"],
            user_data["fullname"],
            user_data["country"],
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        ),
    )
    conn.commit()
    conn.close()
    
    update.message.reply_text("✅ Registration complete! You can now use /channel")
    return ConversationHandler.END

def channel(update: Update, context: CallbackContext) -> None:
    if not is_registered(update.effective_user.id):
        update.message.reply_text("❌ Please register first using /register")
        return
    
    update.message.reply_text("🔗 Please send a YouTube channel URL:")

def handle_channel_url(update: Update, context: CallbackContext) -> None:
    url = update.message.text
    channel_info = get_channel_info(url)
    
    if channel_info:
        response = (
            f"📺 Channel Name: {channel_info['name']}\n"
            f"🔗 Channel URL: {channel_info['url']}"
        )
    else:
        response = "❌ Invalid YouTube channel URL or channel not found"
    
    update.message.reply_text(response)

# ========== Helper Functions ==========
def is_registered(telegram_id: int) -> bool:
    conn = sqlite3.connect(DATABASE_NAME)
    c = conn.cursor()
    c.execute("SELECT 1 FROM users WHERE telegram_id = ?", (telegram_id,))
    result = c.fetchone()
    conn.close()
    return bool(result)

def main() -> None:
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    # Conversation handler for registration
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("register", register)],
        states={
            EMAIL: [MessageHandler(Filters.text & ~Filters.command, email_received)],
            PHONE: [MessageHandler(Filters.text & ~Filters.command, phone_received)],
            FULLNAME: [MessageHandler(Filters.text & ~Filters.command, fullname_received)],
            COUNTRY: [MessageHandler(Filters.text & ~Filters.command, country_received)],
        },
        fallbacks=[],
    )

    # Add handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(CommandHandler("channel", channel))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_channel_url))

    # Start the Bot
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()